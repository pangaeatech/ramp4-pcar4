import{bw as o}from"./main-Bcr58fu1.js";function i(e,t){let r;return{loaded:!1,load:()=>r??=t().then(n=>{m[e]={loaded:!0,execute:n}})}}function u(e){return e==null?null:e.toJSON()}const m={disjoint:i("disjoint",()=>import("./disjointOperator-DV3u8nS9.js").then(e=>e.execute)),intersects:i("intersects",()=>import("./intersectsOperator-BqRlyHr0.js").then(e=>e.execute)),touches:i("touches",()=>import("./touchesOperator-50hClzVb.js").then(e=>e.execute)),crosses:i("crosses",()=>import("./crossesOperator-B2kfdYzv.js").then(e=>e.execute)),within:i("within",()=>import("./withinOperator-Beex9wME.js").then(e=>e.execute)),contains:i("contains",()=>import("./containsOperator-Cs_VOtR4.js").then(e=>e.execute)),overlaps:i("overlaps",()=>import("./overlapsOperator-DPt2Ah-P.js").then(e=>e.execute)),equals:i("equals",async()=>{const e=await import("./equalsOperator-DYTL4Mcq.js").then(t=>t.e);return(t,r)=>e.execute(o(t),o(r))}),relate:i("relate",async()=>{const e=await import("./relateOperator-C3CwJz84.js").then(t=>t.r);return(t,r,n)=>e.execute(o(t),o(r),n)}),intersection:i("intersection",()=>import("./intersectionOperator-6PVTxS28.js").then(e=>e.execute)),union:i("union",()=>import("./unionOperator-CckmDS6j.js").then(e=>e.executeMany)),difference:i("difference",async()=>{const e=await import("./differenceOperator-fMCTtdWd.js").then(t=>t.d);return(t,r)=>u(e.execute(o(t),o(r)))}),symmetricDifference:i("symmetricDifference",async()=>{const e=await import("./symmetricDifferenceOperator-BFz4wc61.js").then(t=>t.s);return(t,r)=>u(e.execute(o(t),o(r)))}),clip:i("clip",async()=>{const e=await import("./clipOperator-DTA6MKlu.js").then(t=>t.c);return(t,r)=>u(e.execute(o(t),o(r)))}),cut:i("cut",async()=>{const e=await import("./cutOperator-KiG_tYu5.js").then(t=>t.c);return(t,r)=>e.execute(o(t),o(r)).map(n=>u(n))}),area:i("area",async()=>{const e=await import("./areaOperator-Br8Vhw7Q.js").then(n=>n.a),{convertFromSpatialReferenceUnit:t,toAreaUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a)=>{const c=e.execute(o(n));return t(n.spatialReference,r(a),c)}}),geodeticArea:i("geodeticArea",async()=>{const e=await import("./geodeticAreaOperator-CsD_MBuU.js").then(a=>a.g),{convert:t,squareMeters:r,toAreaUnit:n}=await import("./unitConversion-dffuAzUL.js");return await e.load(),(a,c,s)=>{const p=e.execute(o(a),{curveType:s});return t(r,n(c),p)}}),length:i("length",async()=>{const e=await import("./lengthOperator-CMviAW-w.js"),{convertFromSpatialReferenceUnit:t,toLengthUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a)=>{const c=e.execute(n);return t(n.spatialReference,r(a),c)}}),geodeticLength:i("geodeticLength",async()=>{const e=await import("./geodeticLengthOperator-jed7xv8X.js").then(a=>a.g),{convert:t,meters:r,toLengthUnit:n}=await import("./unitConversion-dffuAzUL.js");return await e.load(),(a,c,s)=>{const p=e.execute(o(a),{curveType:s});return t(r,n(c),p)}}),distance:i("distance",async()=>{const e=await import("./distanceOperator-6XqO9KlR.js").then(n=>n.d),{convertFromSpatialReferenceUnit:t,toLengthUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a,c)=>{const s=e.execute(o(n),o(a));return t(n.spatialReference,r(c),s)}}),densify:i("densify",async()=>{const e=await import("./densifyOperator-B-mdCOcv.js").then(n=>n.d),{convertToSpatialReferenceUnit:t,toLengthUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a,c)=>(a=t(r(c),n.spatialReference,a),u(e.execute(o(n),a)))}),geodeticDensify:i("geodeticDensify",async()=>{const e=await import("./geodeticDensifyOperator-BRP12KWj.js").then(a=>a.a),{convert:t,meters:r,toLengthUnit:n}=await import("./unitConversion-dffuAzUL.js");return await e.load(),(a,c,s,p)=>(c=t(n(s),r,c),u(e.execute(o(a),c,{curveType:p})))}),generalize:i("generalize",async()=>{const e=await import("./generalizeOperator-DLxCt9Ao.js").then(n=>n.g),{convertToSpatialReferenceUnit:t,toLengthUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a,c,s)=>(a=t(r(c),n.spatialReference,a),u(e.execute(o(n),a,s)))}),buffer:i("buffer",async()=>{const e=await import("./bufferOperator-DBQwvzoe.js"),{convertToSpatialReferenceUnit:t,toLengthUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a,c)=>(a=t(r(c),n.spatialReference,a),e.execute(n,a))}),geodesicBuffer:i("geodesicBuffer",async()=>{const e=await import("./geodesicBufferOperator-aB2twwjx.js"),{convert:t,meters:r,toLengthUnit:n}=await import("./unitConversion-dffuAzUL.js");return await e.load(),(a,c,s,p)=>(c=t(n(s),r,c),e.execute(a,c,{curveType:p}))}),offset:i("offset",async()=>{const e=await import("./offsetOperator-DTAUaCU7.js"),{convertToSpatialReferenceUnit:t,toLengthUnit:r}=await import("./unitConversion-dffuAzUL.js");return(n,a,c,s)=>(a=t(r(c),n.spatialReference,a),e.execute(n,a,s))}),rotate:i("rotate",async()=>{const e=await import("./affineTransformOperator-C1GVt0Bs.js"),{default:t}=await import("./Transformation-DGrooKwM.js");return(r,n,a,c)=>{const s=new t().rotate(n,a,c);return u(e.execute(o(r),s))}}),centroid:i("centroid",async()=>{const e=await import("./centroidOperator-CZDkP1H9.js").then(t=>t.c);return t=>u(e.execute(o(t)))}),labelPoint:i("labelPoint",async()=>{const e=await import("./labelPointOperator-BUkSH2za.js").then(t=>t.l);return t=>u(e.execute(o(t)))}),simplify:i("simplify",()=>import("./simplifyOperator-D8ql62by.js").then(e=>e.execute)),isSelfIntersecting:i("isSelfIntersecting",async()=>{const{NonSimpleResult:e}=await import("./OperatorDefinitions-DJdq_wrt.js"),t=await import("./simplifyOGCOperator-DQ4D1WUo.js"),r=new Set([5,6,7,10,11,12]);return n=>{const a=new e;return!t.isSimple(o(n),a)&&r.has(a.m_reason)}}),isSimple:i("isSimple",()=>import("./simplifyOperator-D8ql62by.js").then(e=>e.isSimple)),convexHull:i("convexHull",()=>import("./convexHullOperator-CEb605ok.js").then(e=>e.execute)),getNearestCoordinate:i("getNearestCoordinate",async()=>{const e=await import("./proximityOperator-plKK2ZYN.js").then(t=>t.p);return(t,r,n)=>{const a=e.getNearestCoordinate(o(t),o(r),n);return{...a,coordinate:u(a.coordinate)}}}),getNearestVertex:i("getNearestVertex",async()=>{const e=await import("./proximityOperator-plKK2ZYN.js").then(t=>t.p);return(t,r)=>{const n=e.getNearestVertex(o(t),o(r));return{...n,coordinate:u(n.coordinate)}}})};function l(e,t){const r=m[e];return r.loaded?r.execute.apply(void 0,t):r.load().then(()=>l(e,t))}export{l as invokeGeometryOp};
